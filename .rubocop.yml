inherit_from: .rubocop_todo.yml

AllCops:
  NewCops: enable
  Exclude:
    - "vendor/**/*" # rubocop config/default.yml
    - "db/schema.rb"
  DisplayCopNames: true

#################### Layout ################################

# メソッドチェーンの改行は末尾に . を入れる
# * REPL に貼り付けた際の暴発を防ぐため
# * 途中にコメントをはさむことができて実用上圧倒的に便利
Layout/DotPosition:
  EnforcedStyle: trailing

# 桁揃えが綺麗にならないことが多いので migration は除外
Layout/ExtraSpacing:
  Exclude:
    - "db/migrate/*.rb"

# private/protected は一段深くインデントする
Layout/IndentationConsistency:
  EnforcedStyle: indented_internal_methods

#################### Lint ##################################

# spec 内では
# expect { subject }.to change { foo }
# という書き方をよく行うので () を省略したい。
Lint/AmbiguousBlockAssociation:
  Exclude:
    - "spec/**/*_spec.rb"

# * 一時変数として `_` を付けるのを許可
Lint/UnderscorePrefixedVariableName:
  Enabled: false

# 抽象クラス的なものを許したいs
Lint/UnusedMethodArgument:
  Enabled: false

# factoryとか空のブロック入りがち
Lint/EmptyBlock:
  Exclude:
    - spec/**/*

#################### Metrics ###############################

Metrics/AbcSize:
  Max: 30

# Gemfile, Guardfile は DSL 的で基本的に複雑にはならないので除外
# rake, rspec, environments, routes は巨大な block 不可避なので除外
# TODO: ExcludedMethods の精査
Metrics/BlockLength:
  Exclude:
    - "Rakefile"
    - "**/*.rake"
    - "spec/**/*.rb"
    - "Gemfile"
    - "Guardfile"
    - "config/environments/*.rb"
    - "config/routes.rb"
    - "config/routes/**/*.rb"

# 6 は強すぎるので緩める
Metrics/CyclomaticComplexity:
  Max: 10

Metrics/MethodLength:
  Max: 20
  Exclude:
    - "db/migrate/*.rb"

#################### Naming ################################

# ブロック内で短い変数使いたい
Naming/MethodParameterName:
  Enabled: false

# has_ から始まるメソッドは許可する
Naming/PredicateName:
  ForbiddenPrefixes:
    - "is_"
    - "have_"
  NamePrefix:
    - "is_"
    - "have_"


# 分岐の数。ガード句を多用しているとデフォルト 7 だと厳しい
Metrics/PerceivedComplexity:
  Max: 8

#################### Style #################################

# spec 内は見た目が綺麗になるので許可
Style/BlockDelimiters:
  Exclude:
    - "spec/**/*_spec.rb"

# scope が違うとか親 module の存在確認が必要とかデメリットはあるが、
# namespace 付きのクラスはかなり頻繁に作るので簡単に書きたい。
Style/ClassAndModuleChildren:
  Enabled: false

# Style/CollectionMethods 自体は無効になっているのだが、
#   https://github.com/bbatsov/rubocop/issues/1084
#   https://github.com/bbatsov/rubocop/issues/1334
# Performance/Detect がこの設定値を見るので PreferredMethods だけ変更しておく。
#
# デフォルト値から変えたのは
#   find -> detect
#     ActiveRecord の find と間違えやすいため
#   reduce -> inject
#     detect, reject, select と並べたときに韻を踏んでいるため。
#     collect -> map を維持しているのは文字数が圧倒的に少ないため。
Style/CollectionMethods:
  PreferredMethods:
    detect: "detect"
    find: "detect"
    inject: "inject"
    reduce: "inject"

# ドキュメントの無い public class を許可する
Style/Documentation:
  Enabled: false

# !!許す
Style/DoubleNegation:
  Enabled: false

# case
# when ios?
# when android?
# end
# のようなものは case の方が網羅の表現力が高い
Style/EmptyCaseCondition:
  Enabled: false

# 明示的に else で nil を返すのは分かりやすいので許可する
Style/EmptyElse:
  EnforcedStyle: empty

# 空メソッドの場合だけ1行で書かなければいけない理由が無い
# 「セミコロンは使わない」に寄せた方がルールがシンプル
Style/EmptyMethod:
  EnforcedStyle: expanded

# いずれかに揃えるのならば `sprintf` や `format` より String#% が好きです
Style/FormatString:
  EnforcedStyle: percent

# if 文の中に 3 行程度のブロックを書くぐらいは許容した方が現実的
# NOTE: https://github.com/bbatsov/rubocop/commit/29945958034db13af9e8ff385ec58cb9eb464596
#       の影響で、if 文の中身が 1 行の場合に警告されるようになっている。
#       Style/IfUnlessModifier の設定見てくれないかなぁ？ (v0.36.0)
Style/GuardClause:
  MinBodyLength: 5

# rake タスクの順序の hash は rocket を許可する
Style/HashSyntax:
  Exclude:
    - "**/*.rake"
    - "Rakefile"

# 平たくしてしまうと条件のグルーピングが脳内モデルとズレやすい
Style/IfInsideElse:
  Enabled: false

# 条件式の方を意識させたい場合には後置の if/unless を使わない方が分かりやすい
Style/IfUnlessModifier:
  Enabled: false

# この 2 つは単発で動かすのが分かっているので Object を汚染しても問題ない。
# spec/dummy は Rails Engine を開発するときに絶対に引っかかるので入れておく。
Style/MixinUsage:
  Exclude:
    - "bin/setup"
    - "bin/update"
    - "spec/dummy/bin/setup"
    - "spec/dummy/bin/update"

# 1_000_000 と区切り文字が 2 個以上必要になる場合のみ _ 区切りを必須にする
# 10_000_00 は許可しない。(これは例えば 10000 ドルをセント単位にする時に便利だが
# 頻出しないので foolproof に振る
Style/NumericLiterals:
  MinDigits: 7
  Strict: true

# falsy な場合という条件式の方を意識させたい場合がある。
# Style/IfUnlessModifier と同じ雰囲気。
Style/OrAssignment:
  Enabled: false

# 正規表現にマッチさせた時の特殊変数の置き換えは Regex.last_match ではなく
# 名前付きキャプチャを使って参照したいので auto-correct しない
Style/PerlBackrefs:
  AutoCorrect: false

# Hash#has_key? の方が key? よりも意味が通る
Style/PreferredHashMethods:
  EnforcedStyle: verbose

# 受け取り側で multiple assignment しろというのを明示
Style/RedundantReturn:
  AllowMultipleReturnValues: true

# 特に model 内において、ローカル変数とメソッド呼び出しの区別をつけた方が分かりやすい場合が多い
Style/RedundantSelf:
  Enabled: false

# 無指定だと StandardError を rescue するのは常識の範疇なので。
Style/RescueStandardError:
  EnforcedStyle: implicit

# spec 内は見た目が綺麗になるので許可
Style/Semicolon:
  Exclude:
    - "spec/**/*_spec.rb"

# * 式展開したい場合に書き換えるのが面倒
# * 文章ではダブルクォートよりもシングルクォートの方が頻出する
# ことから EnforcedStyle: double_quotes 推奨
Style/StringLiterals:
  EnforcedStyle: double_quotes

# 式展開中でもダブルクォートを使う
# 普段の文字列リテラルがダブルクォートなので使い分けるのが面倒
Style/StringLiteralsInInterpolation:
  EnforcedStyle: double_quotes

# String#intern は ruby の内部表現すぎるので String#to_sym を使う
Style/StringMethods:
  Enabled: true

# %w() と %i() が見分けづらいので Style/WordArray と合わせて無効に。
# 書き手に委ねるという意味で、Enabled: false にしています。使っても良い。
Style/SymbolArray:
  Enabled: false

# 三項演算子は分かりやすく使いたい。
# () を外さない方が条件式が何なのか読み取りやすいと感じる。
Style/TernaryParentheses:
  EnforcedStyle: require_parentheses_when_complex

# 複数行の場合はケツカンマを入れる(引数)
# Ruby は関数の引数もカンマを許容しているので
# * 単行は常にケツカンマ無し
# * 複数行は常にケツカンマ有り
# に統一したい。
# 見た目がアレだが、ES2017 でも関数引数のケツカンマが許容されるので
# 世界はそちらに向かっている。
Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

# 複数行の場合はケツカンマを入れる(Arrayリテラル)
# JSON がケツカンマを許していないという反対意見もあるが、
# 古い JScript の仕様に縛られる必要は無い。
# IE9 以降はリテラルでケツカンマ OK なので正しい差分行の検出に寄せる。
# 2 insertions(+), 1 deletion(-) ではなく、1 insertions
Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

# 複数行の場合はケツカンマを入れる(Hashリテラル)
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

# %w() と %i() が見分けづらいので Style/SymbolArray と合わせて無効に。
# 書き手に委ねるという意味で、Enabled: false にしています。使っても良い。
Style/WordArray:
  Enabled: false

# frozen string一旦無視
Style/FrozenStringLiteralComment:
  Enabled: false

# 日本語のコメントﾕﾙｼﾃ
Style/AsciiComments:
  Enabled: false
